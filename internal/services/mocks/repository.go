// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/jzavala-globant/testing-demo-go/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// GetBookByID provides a mock function with given fields: _a0, _a1
func (_m *Repository) GetBookByID(_a0 context.Context, _a1 int64) (*models.DBBook, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *models.DBBook
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*models.DBBook, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *models.DBBook); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.DBBook)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBooks provides a mock function with given fields: _a0
func (_m *Repository) ListBooks(_a0 context.Context) ([]*models.DBBook, error) {
	ret := _m.Called(_a0)

	var r0 []*models.DBBook
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*models.DBBook, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*models.DBBook); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.DBBook)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
